import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author  Thewinator
 */
public class MemoryDialog extends javax.swing.JDialog implements Runnable {

    /** Creates new form MemoryDialog */
    public MemoryDialog(java.awt.Frame parent) {
        super(parent, false);
        initComponents();
        new Thread(this).start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        txtTotalMem = new javax.swing.JLabel();
        txtMaxMem = new javax.swing.JLabel();
        memBar = new javax.swing.JProgressBar();
        bRunGC = new javax.swing.JButton();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Memory monitor");
        setLocationByPlatform(true);
        setResizable(false);
        txtTotalMem.setText("Total memory used:");
        txtMaxMem.setText("Maximum memory:");
        bRunGC.setText("Run GarbageCollector");
        bRunGC.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRunGCActionPerformed(evt);
            }
        });
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(txtTotalMem, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE).addComponent(txtMaxMem, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE).addComponent(memBar, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE))).addGroup(layout.createSequentialGroup().addGap(65, 65, 65).addComponent(bRunGC))).addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addComponent(txtTotalMem).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(txtMaxMem).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(memBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(bRunGC).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        pack();
    }

    private void bRunGCActionPerformed(java.awt.event.ActionEvent evt) {
        Runtime.getRuntime().gc();
    }

    private javax.swing.JButton bRunGC;

    private javax.swing.JProgressBar memBar;

    private javax.swing.JLabel txtMaxMem;

    private javax.swing.JLabel txtTotalMem;

    public void run() {
        Debugger.appendAction("Opened MemoryDialog");
        setVisible(true);
        while (isVisible()) {
            txtTotalMem.setText("Total memory reserved: " + (Runtime.getRuntime().totalMemory() / 1024 / 1024) + "MB");
            txtMaxMem.setText("Maximum memory: " + (Runtime.getRuntime().maxMemory() / 1024 / 1024) + "MB");
            memBar.setMaximum((int) Runtime.getRuntime().maxMemory());
            memBar.setValue((int) Runtime.getRuntime().totalMemory());
            try {
                Thread.sleep(500);
            } catch (InterruptedException ex) {
                Debugger.appendLog("Failed: MemoryDialog Thread");
                Debugger.storeException(ex);
            }
        }
        Debugger.appendLog("Succesfull: MemoryDialog Thread");
        Debugger.appendAction("Closed MemoryDialog");
    }
}
